#!/usr/bin/bash

# Copyright (c) 2015-2016 Andrea Giammarchi
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

archy() {
  local SYSLINUX
  local TMP
  local ITEM
  local OUT
  local RESULT
  local WIDTH=$2
  local HEIGHT=$3
  case $1 in
    archibold-boot-image)
      cd ~/Downloads
      TMP=$(sudo pacman -Qs fbset)
      if [ "$TMP" = "" ]; then
        sudo pacman -S --needed --noconfirm fbset
      fi
      if [ "$WIDTH" = "" ]; then
        WIDTH=$(sudo fbset | grep 'mode ' | sed -e 's/mode "//' | sed -e 's/x.*//')
      fi
      if [ "$HEIGHT" = "" ]; then
        HEIGHT=$(sudo fbset | grep 'mode ' | sed -e 's/mode "[0-9]*x//' | sed -e 's/"//')
      fi
      if [ "$TMP" = "" ]; then
        sudo pacman -Rsc --noconfirm fbset
      fi
      TMP=$(sudo pacman -Qs inkscape)
      if [ "$TMP" = "" ]; then
        sudo pacman -S --needed --noconfirm inkscape
      fi
      curl -L -O https://webreflection.github.io/archibold.io/img/archibold.svg
      inkscape \
        --export-png=archibold.png \
        --export-width=$WIDTH \
        --export-height=$HEIGHT \
        archibold.svg
      convert archibold.png -quality 100% archibold.jpg
      if [ -d "/boot/EFI/syslinux" ]; then
        echo "moving new ${WIDTH}x${HEIGHT} splash into /boot/EFI"
        sudo cp archibold.jpg /boot/EFI
        updateSyslinuxConfig "/boot/EFI" "$WIDTH" "$HEIGHT"
      else
        if [ -d "/boot/efi/syslinux" ]; then
          echo "moving new ${WIDTH}x${HEIGHT} splash into /boot/efi"
          sudo cp archibold.jpg /boot/efi
          updateSyslinuxConfig "/boot/efi" "$WIDTH" "$HEIGHT"
        else
          echo "moving new ${WIDTH}x${HEIGHT} splash into /boot"
          sudo cp archibold.jpg /boot
          updateSyslinuxConfig "/boot" "$WIDTH" "$HEIGHT"
        fi
      fi
      echo "updated background size as ${WIDTH}x${HEIGHT}"
      rm archibold.{jpg,png,svg}
      if [ "$TMP" = "" ]; then
        sudo pacman -Rsc --noconfirm inkscape
      fi
      ;;
    clean)
      sudo pacman -Sc --noconfirm
      sudo pacman-optimize
      ;;
    clear)
      archy clean
      ;;
    create-desktop-app)
      OUT="${3}.png"
      if [ "$2" = "" ] || [ "$3" = "" ] || [ ! -f "$3" ] || [ ! -f "$OUT" ]; then
        icho "
  [*]Usage[/]:
    archy create-desktop-app 'AppName' '/path/to/executable-file'

  Please note, there must be a '/path/to/executable-file.png' icon too.
        "
        exit 1
      fi
      mkdir -p /tmp/create-desktop-app
      cp $3 /tmp/create-desktop-app
      cp $OUT /tmp/create-desktop-app
      cd /tmp/create-desktop-app
      TMP="$(basename $3)"
      ITEM="$(basename $OUT)"
      chmod +x "$TMP"
      echo '#!/bin/sh
set -e
test -n "$srcdir" || srcdir=`dirname "$0"`
test -n "$srcdir" || srcdir=.
olddir=`pwd`
cd "$srcdir"
autoreconf --force --install
cd "$olddir"
if test -z "$NOCONFIGURE"; then
  "$srcdir"/configure "$@"
fi'>autogen.sh
      chmod +x autogen.sh
      echo "[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$2
Comment=$2 Application
Exec=@prefix@/bin/$TMP
Icon=@prefix@/bin/$ITEM
Terminal=false
Type=Application
StartupNotify=true
Categories=GNOME;Application;">"${TMP}.desktop.in"
      echo "bin_SCRIPTS = ${TMP}">Makefile.am
      echo 'EXTRA_DIST = $(bin_SCRIPTS)'>>Makefile.am
      echo 'desktopdir = $(datadir)/applications'>>Makefile.am
      echo "desktop_DATA = ${TMP}.desktop">>Makefile.am
      echo "AC_INIT([$2], 1.0)
AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])
AC_CONFIG_FILES([Makefile ${TMP}.desktop])
AC_OUTPUT">configure.ac
      ./autogen.sh
      sudo make install
      sudo cp $ITEM "$(dirname $(which $TMP))"
      rm -rf /tmp/create-desktop-app
      icho "
  Application [*]${2}[/] successfully installed as ${TMP}
      "
      ;;
    destroy-desktop-app)
      TMP="$2"
      if [ "$(which $TMP 2> /dev/null)" = "" ]; then
        icho "[r]Unable[/] to find [*]${TMP}[/]"
      else
        ITEM="$(which $TMP)"
        sudo rm -rf "$(dirname $(dirname ${ITEM}))/share/applications/${TMP}.desktop"
        sudo rm -rf "${ITEM}.png"
        sudo rm -rf "${ITEM}"
      fi
      ;;
    gnome-login-bg)
      gnomeLoginBG $2
      ;;
    install)
      case $2 in
        archy-android)
          sudo pacman -S --needed --noconfirm jdk8-openjdk android-udev android-tools apache-ant
          verifyYaourt
          yaourt -S --needed --noconfirm android-sdk android-sdk-platform-tools android-sdk-build-tools android-platform
          sudo groupadd sdkusers
          sudo gpasswd -a $USER sdkusers
          if [ "$ANDROID_HOME" = "" ]; then
            export ANDROID_HOME=/opt/android-sdk
            echo '
# needed by PhoneGap
ANDROID_HOME=/opt/android-sdk
PATH="$PATH:$ANDROID_HOME/tools"'>>~/.bashrc
          fi
          sudo chown -R :sdkusers /opt/android-sdk/
          sudo chmod -R g+w /opt/android-sdk/
          echo '
SUBSYSTEM=="usb", ATTR{idVendor}=="[VENDOR ID]", MODE="0666"
SUBSYSTEM=="usb",ATTR{idVendor}=="[VENDOR ID]",ATTR{idProduct}=="[PRODUCT ID]",SYMLINK+="android_adb"
SUBSYSTEM=="usb",ATTR{idVendor}=="[VENDOR ID]",ATTR{idProduct}=="[PRODUCT ID]",SYMLINK+="android_fastboot"
'>>51-android.rules
          sudo mv 51-android.rules /etc/udev/rules.d/
          sudo udevadm control --reload-rules
          echo ''
          echo 'unplug and re-plug your device, if any'
          echo ''
          ;;
        archy-broadcom-wl-dkms)
          sudo pacman -Syu --needed --noconfirm linux-headers dkms
          sudo systemctl enable dkms.service
          verifyYaourt
          yaourt -S --needed --noconfirm broadcom-wl-dkms
          ;;
        archy-chromium)
          sudo pacman -S --needed --noconfirm chromium
          verifyYaourt
          yaourt -S --needed --noconfirm chromium-widevine
          ;;
        archy-dropbox)
          sudo pacman -S --needed --noconfirm ufw-extras perl-file-mimeinfo
          verifyYaourt
          yaourt -S --needed --noconfirm dropbox
          ;;
        archy-espruino-pico)
          sudo groupadd plugdev
          sudo gpasswd -a $USER plugdev
          mkdir -p ~/Downloads
          echo '# To go in /etc/udev/rules.d/
# Makes Espruino s serial port accessible to non-SU users, and stops the Modem Manager trying to enumerate it
ATTRS{idProduct}=="5740", ATTRS{idVendor}=="0483", ENV{ID_MM_DEVICE_IGNORE}="1", MODE="0666", GROUP="plugdev"'>~/Downloads/45-espruino.rules
          sudo mv ~/Downloads/45-espruino.rules /etc/udev/rules.d/
          sudo udevadm control --reload-rules
          ;;
        archy-chip)
          sudo groupadd dialout
          sudo gpasswd -a $USER dialout
          sudo groupadd plugdev
          sudo gpasswd -a $USER plugdev
          echo -e 'SUBSYSTEM=="usb", ATTRS{idVendor}=="1f3a", ATTRS{idProduct}=="efe8", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip"
SUBSYSTEM=="usb", ATTRS{idVendor}=="18d1", ATTRS{idProduct}=="1010", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip-fastboot"
SUBSYSTEM=="usb", ATTRS{idVendor}=="1f3a", ATTRS{idProduct}=="1010", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip-fastboot"
SUBSYSTEM=="usb", ATTRS{idVendor}=="067b", ATTRS{idProduct}=="2303", GROUP="plugdev", MODE="0660" SYMLINK+="usb-serial-adapter"
' | sudo tee /etc/udev/rules.d/99-allwinner.rules
          sudo udevadm control --reload-rules
          ;;
        archy-fonts)
          sudo pacman -S --needed --noconfirm ttf-dejavu ttf-liberation ttf-symbola ttf-droid ttf-freefont
          ;;
        archy-fs-extra)
          sudo pacman -S --needed --noconfirm exfat-utils fuse-exfat dosfstools ntfs-3g
          ;;
        archy-git)
          if [ "$GIT_USER" != "" ]; then
            if [ "$GIT_EMAIL" != "" ]; then
              sudo pacman -S --needed --noconfirm git
              git config --global user.name "$GIT_USER"
              git config --global user.email "$GIT_EMAIL"
              git config --global push.default simple
              sudo pacman -S --needed --noconfirm openssh xclip
              ssh-keygen -t rsa -C "$GIT_EMAIL"
              eval "$(ssh-agent -s)"
              ssh-add ~/.ssh/id_rsa
              echo '
Time to add your key in GitHub.'
              read -n1 -r -p "Press any key to copy to clipboard" key
              cat ~/.ssh/id_rsa.pub | xclip -selection clipboard
              echo ''
              icho '[*][g]✔[/] [*]git[/] successfully configured.'
              echo 'You can now add your key* in https://github.com/settings/ssh'
              echo ' * the key will be available via Ctrl+v'
              echo ''
              exit 0
            fi
          fi
          echo ''
          icho '[*][r]x[/] unable to configure [*]git[/]'
          icho 'Please specify a [*]GIT_USER[/] and a [*]GIT_EMAIL[/] upfront.'
          echo 'GIT_USER="Name Surname" GIT_EMAIL="name@surname.com" archy install archy-git'
          echo ''
          exit 1
          ;;
        archy-heroku)
          sudo pacman -S --needed --noconfirm ruby
          mkdir -p ~/Downloads
          cd ~/Downloads
          curl -L -O https://toolbelt.heroku.com/install.sh
          sh install.sh
          rm install.sh
          echo '# heroku' >> ~/.bashrc
          echo 'PATH="/usr/local/heroku/bin:$PATH"' >> ~/.bashrc
          ;;
        archy-intel-cstick-wifi)
          sudo pacman -S --needed --noconfirm linux-headers
          mkdir -p ~/Downloads
          cd ~/Downloads
          git clone https://github.com/hadess/rtl8723bs
          cd rtl8723bs
          make
          sudo make install
          cd ..
          rm -rf rtl8723bs
          ;;
        archy-node)
          sudo pacman -S --needed --noconfirm npm nodejs
          mkdir -p ~/.npm-packages/bin
          npm config set prefix '~/.npm-packages'
          echo '
# npm and nodejs global modules
export PATH="$PATH:$HOME/.npm-packages/bin"
export NODE_PATH="$NODE_PATH:$HOME/.npm-packages/lib/node_modules"
'>>~/.bashrc
          echo ''
          echo 'Please add your npm info (if any)'
          echo ''
          npm adduser
          ;;
        archy-pad)
          sudo pacman -S --needed --noconfirm dosfstools usbmuxd gvfs-afc gvfs-afp gvfs-goa gvfs-gphoto2 gvfs-mtp gvfs-smb
          ;;
        archy-spotify)
          sudo pacman -S --needed --noconfirm ffmpeg-compat
          verifyYaourt
          yaourt -S --needed --noconfirm libgcrypt15 libcurl-compat
          yaourt -S --needed --noconfirm spotify
          ;;
        archy-steam)
          sudo pacman -S --needed --noconfirm steam lib32-libxtst lib32-libpulse lib32-openal lib32-nss lib32-gtk2 lib32-gtk3 lib32-libcanberra lib32-gconf lib32-dbus-glib lib32-libnm-glib lib32-libudev0-shim
          ;;
        archy-sublime3)
          verifyYaourt
          yaourt -S --needed --noconfirm sublime-text-nightly
          mkdir -p /home/$USER/.config/sublime-text-3/Packages
          if [ ! -d "/home/$USER/.config/sublime-text-3/Packages/Theme - Soda" ]; then
            cd /home/$USER/.config/sublime-text-3/Packages
            git clone https://github.com/buymeasoda/soda-theme/ "Theme - Soda"
          fi
          ;;
        archy-telegram)
          verifyYaourt
          yaourt -S --needed --noconfirm telegram-desktop-bin
          ;;
        archy-virtualbox)
          sudo pacman -S --needed --noconfirm linux-headers virtualbox virtualbox-host-modules-arch qt5-x11extras
          echo 'vboxdrv
vboxnetadp
vboxnetflt
vboxpci'>~/virtualbox.conf
          sudo mv ~/virtualbox.conf /etc/modules-load.d/virtualbox.conf
          sudo modprobe vboxdrv
          sudo modprobe vboxnetadp
          sudo modprobe vboxnetflt
          sudo modprobe vboxpci
          sudo gpasswd -a $USER vboxusers
          verifyYaourt
          yaourt -S --needed --noconfirm virtualbox-ext-oracle
          # For WebCam passthrough (where USB 2.0 works better than 3.0)
          # https://www.virtualbox.org/manual/ch09.html#webcam-passthrough
          # e.g.
          # VBoxManage list webcams
          # > .1 "Integrated_Webcam_HD"
          # > /dev/video0
          # VBoxManage controlvm "Win64" webcam attach ".1"
          # OR
          # VBoxManage controlvm "Win64" webcam attach /dev/video0
          # OR
          # VBoxManage startvm Win64 --type gui && VBoxManage controlvm Win64 webcam attach /dev/video0
          ;;
        *)
          if [ "$(sudo pacman -Ssq $2 | grep ^$2$)" != "" ]; then
            sudo pacman -S --needed --noconfirm $2
          else
            verifyYaourt
            if [ "$(yaourt -Ssq $2 | grep ^$2$)" != "" ]; then
              icho " [y]![/] Package [*]$2[/] found in [*]AUR[/]$TMP"
              read -n1 -r -p "Would you like to proceed? [y/N]" TMP
              if [ "$TMP" = "Y" ]; then
                TMP="y"
              fi
              if [ "$TMP" = "y" ]; then
                yaourt -S --needed --noconfirm $2
              fi
            else
              icho " [r]x[/] Unable to find [*]$2[/] package"
            fi
          fi
          ;;
      esac
      ;;
    reset-keys)
      sudo dirmngr </dev/null
      sudo pacman -Sy --noconfirm
      sudo pacman-key -u
      sudo pacman-key --populate archlinux
      sudo pacman-key --refresh-keys
      ;;
    search)
      if [ "$(sudo pacman -Qsq $2 | grep ^$2$)" != "" ]; then
        TMP=" [installed]"
      fi
      if [ "$(sudo pacman -Ssq $2 | grep ^$2$)" != "" ]; then
        icho " [g]✔[/] Official [*]$2[/] package available$TMP"
      else
        verifyYaourt
        if [ "$(yaourt -Ssq $2 | grep ^$2$)" != "" ]; then
          icho " [y]![/] Package [*]$2[/] found in [*]AUR[/]$TMP"
        else
          TMP="$(yaourt -Ssq $2)"
          if [ "$TMP" != "" ]; then
            OUT=""
            for ITEM in $TMP; do
              OUT="$OUT, $ITEM"
            done
            icho " [*]$2[/] not found."
            echo " Perhaps one of the following?"
            echo " ${OUT:2}"
          else
            icho " [r]x[/] Unable to find [*]$2[/] package"
          fi
        fi
      fi
      ;;
    show-gnome-settings)
      for schema in `gsettings list-schemas`; do
        for key in `gsettings list-keys $schema`; do
          echo "$schema $key $(gsettings get $schema $key)"
        done
      done
      ;;
    remove)
      archy uninstall $2
      ;;
    sha)
      sha "sha" "$2"
      ;;
    sha1)
      sha "sha1" "$2"
      ;;
    sha224)
      sha "sha224" "$2"
      ;;
    sha256)
      sha "sha256" "$2"
      ;;
    sha384)
      sha "sha384" "$2"
      ;;
    sha512)
      sha "sha512" "$2"
      ;;
    tmpsize)
      if [ "$2" != "" ]; then
        sudo mount -o remount,size=$2 /tmp
      fi
      df -h /tmp
      ;;
    uninstall)
      case $2 in
        archy-android)
          sudo pacman -Rsc jdk8-openjdk android-udev android-tools apache-ant
          verifyYaourt
          yaourt -Rsc android-sdk android-sdk-platform-tools android-sdk-build-tools android-platform
          ;;
        archy-broadcom-wl-dkms)
          sudo systemctl disable dkms.service
          verifyYaourt
          yaourt -Rsc broadcom-wl-dkms
          sudo pacman -Rsc linux-headers dkms
          ;;
        archy-chromium)
          sudo pacman -Rsc chromium
          verifyYaourt
          yaourt -Rsc chromium-widevine
          ;;
        archy-dropbox)
          sudo pacman -Rsc ufw-extras perl-file-mimeinfo
          verifyYaourt
          yaourt -Rsc dropbox
          ;;
        archy-espruino-pico)
          if [ -f /etc/udev/rules.d/45-espruino.rules ]; then
            sudo rm /etc/udev/rules.d/45-espruino.rules
          fi
          ;;
        archy-chip)
          if [ -f /etc/udev/rules.d/99-allwinner.rules ]; then
            sudo rm /etc/udev/rules.d/99-allwinner.rules
          fi
          ;;
        archy-fonts)
          sudo pacman -R ttf-dejavu ttf-liberation ttf-symbola ttf-droid ttf-freefont
          ;;
        archy-fs-extra)
          sudo pacman -Rsc exfat-utils fuse-exfat dosfstools ntfs-3g
          ;;
        archy-git)
          sudo pacman -Rsc git
          ;;
        archy-heroku)
          sudo pacman -Rsc ruby
          ;;
        archy-intel-cstick-wifi)
          sudo pacman -S --needed --noconfirm linux-headers
          mkdir -p ~/Downloads
          cd ~/Downloads
          git clone https://github.com/hadess/rtl8723bs
          cd rtl8723bs
          make
          sudo make uninstall
          cd ..
          rm -rf rtl8723bs
          sudo pacman -Rsc linux-headers
          ;;
        archy-node)
          sudo pacman -Rsc npm nodejs
          ;;
        archy-pad)
          sudo pacman -Rsc dosfstools usbmuxd gvfs-afc gvfs-afp gvfs-goa gvfs-gphoto2 gvfs-mtp gvfs-smb
          ;;
        archy-spotify)
          sudo pacman -Rsc ffmpeg-compat
          verifyYaourt
          yaourt -Rsc libgcrypt15 libcurl-compat spotify
          ;;
        archy-sublime3)
          verifyYaourt
          yaourt -Rsc sublime-text-nightly
          if [ -d /home/$USER/.config/sublime-text-3 ]; then
            rm -rf /home/$USER/.config/sublime-text-3
          fi
          ;;
        archy-telegram)
          verifyYaourt
          yaourt -Rsc telegram-desktop-bin
          ;;
        archy-virtualbox)
          verifyYaourt
          yaourt -Rsc virtualbox-ext-oracle virtualbox virtualbox-host-modules-arch qt5-x11extras
          if [ -f /etc/modules-load.d/virtualbox.conf ]; then
            sudo rm /etc/modules-load.d/virtualbox.conf
          fi
          ;;
        *)
          verifyYaourt
          yaourt -Rsc $2
          ;;
      esac
      ;;
    update)
      if [ "$(which syslinux 2> /dev/null)" != "" ]; then
        if [ "$(sudo cat /etc/mtab | grep /boot)" = "" ]; then
          if [ "$(which efibootmgr 2> /dev/null)" != "" ]; then
            mountBoot
            sleep 1
            if [ "$(checkBoot)" = "0" ]; then
              icho '[*][r]WARNING[/] unable to mount [*]/boot[/] folder'
              exit 1
            fi
          fi
        fi
        if [ "5" \> "$(archy version-major pacman)" ];then
          if [ "$(sudo pacman -Qsq yaourt | grep ^yaourt$)" != "" ]; then
            OUT="upgrade-yaourt"
            sudo pacman -Rsc --noconfirm package-query
          fi
        fi
        TMP="$(sudo pacman -Qs gnome-shell)"
        SYSLINUX="$(archy version syslinux)"
      fi
      sudo pacman -Syu --noconfirm
      sudo pacman-db-upgrade
      if [ "$SYSLINUX" != "" ]; then
        if [ "$(sudo pacman -Qs gnome-shell)" != "$TMP" ]; then
          icho "[*]GNOME updated[/]"
          echo " if after reboot login screen background won't work, try:"
          echo " archy gnome-login-bg"
        fi
        if [ "$(archy version syslinux)" != "$SYSLINUX" ]; then
          if [ "$(sudo pacman -Qs efibootmgr)" != "" ]; then
            icho "[*]Syslinux updated[/] ... regenerating boot loader."
            archy update-syslinux-efi
            # if [ -f "/boot/EFI/BOOT/bootx64.efi" ]; then
            #   cp /boot/syslinux/loader.efi /boot/EFI/BOOT/bootx64.efi
            # fi
          fi
        fi
      fi
      if [ "$2" = "aur" ]; then
        verifyYaourt
        yaourt -Su --aur --noconfirm
      fi
      # legacy archiboiold syslinux gotcha
      if [ -d "/boot/EFI" ]; then
        if [ -f "/boot/vmlinuz-linux" ]; then
          echo 'Linux upgraded, moving files ...'
          sudo mv /boot/{vmlinuz-linux,*.img} "/boot/EFI"
        fi
      else
        if [ -d "/boot/efi" ]; then
          if [ -f "/boot/vmlinuz-linux" ]; then
            echo 'Linux upgraded, moving files ...'
            sudo mv /boot/{vmlinuz-linux,*.img} "/boot/efi"
          fi
        fi
      fi
      if [ "$OUT" = "upgrade-yaourt" ]; then
        verifyYaourt
      fi
      ;;
    update-syslinux-efi)
      if [ "$TMP" = "" ]; then
        if [ "$(uname -m)" = "x86_64" ]; then
          TMP='efi64'
        else
          TMP='efi32'
        fi
      else
        TMP="$2"
      fi
      sudo cp -r /usr/lib/syslinux/${TMP}/* /boot/syslinux
      if [ -d /usr/share/efitools/efi/ ]; then
        sudo cp /usr/share/efitools/efi/{PreLoader,HashTool}.efi /boot/syslinux/
        sudo cp /boot/syslinux/syslinux.efi /boot/syslinux/loader.efi
        icho " Remember to enroll last [*]loader[/] file hash via the [*]secure boot[/]"
      else
        # old system fallback
        if [ -d /usr/lib/prebootloader ]; then
          sudo cp /usr/lib/prebootloader/{PreLoader,HashTool}.efi /boot/syslinux/
          sudo cp /boot/syslinux/syslinux.efi /boot/syslinux/loader.efi
          icho " Remember to enroll last [*]loader[/] file hash via the [*]secure boot[/]"
        fi
      fi
      ;;
    upgrade)
      TMP="$(which archy)"
      if [ "$TMP" != "" ]; then
        WIDTH=$(cat $TMP)
        sudo curl -L -s -o "$TMP" "http://archibold.io/sh/archy"
        sudo chmod +x $TMP
        if [[ $? -ne 0 ]] ; then
          icho " [*][r]x[/] [*]unable to update archy[/]"
        else
          if [ "$WIDTH" != "$(cat $TMP)" ]; then
            icho " [*][g]✔[/] [*]archy is up to date[/] \o/"
            icho "   please restart the upgrade."
            exit 0
          fi
        fi
      fi
      archy update $2
      ;;
    use)
      case $2 in
        linux)
          if [ ! -f /boot/syslinux/syslinux.cfg ]; then
            echo 'Unable to locate syslinux. Please mount /boot first'
            exit 1
          fi
          sync
          sudo pacman -S --needed --noconfirm linux linux-headers 2> /dev/null
          sudo sed -i 's/vmlinuz-linux-lts/vmlinuz-linux/;s/initramfs-linux-lts.img/initramfs-linux.img/' /boot/syslinux/syslinux.cfg
          if [ "$3" = "only" ]; then
            sudo pacman -R --noconfirm linux-lts linux-lts-headers 2> /dev/null
          fi
          icho "now using [*]linux[/] $(archy version linux)"
        ;;
        linux-lts)
          archy use linux
          if [[ $? -ne 0 ]] ; then
            exit 1
          fi
          sync
          sudo pacman -S --needed --noconfirm linux-lts linux-lts-headers 2> /dev/null
          sudo sed -i 's/vmlinuz-linux/vmlinuz-linux-lts/;s/initramfs-linux.img/initramfs-linux-lts.img/' /boot/syslinux/syslinux.cfg
          if [ "$3" = "only" ]; then
            sudo pacman -R --noconfirm linux linux-headers 2> /dev/null
          fi
          icho "now using [*]linux-lts[/] $(archy version linux-lts)"
        ;;
        python2)
          TMP=$(which python)
          sudo rm -f $TMP
          sudo ln -s $(which python2) $TMP
          icho "now using [*]python2[/] $(python --version)"
        ;;
        python3)
          TMP=$(which python)
          sudo rm -f $TMP
          sudo ln -s $(which python3) $TMP
          icho "now using [*]python3[/] $(python --version)"
        ;;
        *)
        icho "
[*]archibold use [options][/]
                  ↓
               python2
               python3
               linux-lts  [only]
               linux      [only]
  
"
        ;;
      esac
      ;;
    version)
      TMP=$(
        pacman -Q $2 |
        sed -n -E "s/^.+?[ ]+([0-9.-]+).*/\1/p"
      )
      echo $TMP
      ;;
    version-major)
      TMP=$(
        pacman -Q $2 |
        sed -n -E "s/^.+?[ ]+([0-9]+).*/\1/p"
      )
      echo $TMP
      ;;
    *)
      icho "[*][g]
 ╔════════════════╗
 ║  archy v0.3.0  ║
 ╚════════════════╝
 [/]
 [g]usage[/]:

  archy [clean|clear|reset-keys|update|upgrade] [aur]
  archy [install|remove|search|uninstall] package-name
  archy [archibold-boot-image|gnome-login-bg|show-gnome-settings|use]
  archy [sha|sha1|sha224|sha256|sha384|sha512] file-name-or-string
  archy [create-desktop-app 'App Name' '/path/to/exec-app']
  archy [destroy-desktop-app exec-app]
  archy tmpsize 8G

 [g]list of simplified installations[/]: [d]archy install archy-*[/]

  archy-android              [b]# android-sdk and development[/]
  archy-broadcom-wl-dkms     [b]# Broadcom wifi[/]
  archy-chromium             [b]# Chromium with pepper-flash and DRM[/]
  archy-dropbox              [b]# Dropbox client[/]
  archy-espruino-pico        [b]# configure group and rules for pico[/]
  archy-chip                 [b]# configure group and rules for C.H.I.P.[/]
  archy-fonts                [b]# install common fonts (non GNOME only)[/]
  archy-fs-extra             [b]# (ex)fat utilities[/]
  archy-git                  [b]# git + ssh key configuration[/]
  archy-heroku               [b]# configure heroku[/]
  archy-intel-cstick-wifi    [b]# compute stick WiFi module[/]
  archy-node                 [b]# nodejs + npm configuration[/]
  archy-pad                  [b]# recognizes external devices (iOS)[/]
  archy-spotify              [b]# install Spotify[/]
  archy-telegram             [b]# install Telegram Messanger[/]
  archy-virtualbox           [b]# configure Virtualbox[/]
"
    echo ''
    ;;
  esac
}

checkBoot() {
  if [ ! -d "/boot" ] || [ "$(ls /boot)" = "" ]; then
    echo '0'
  else
    echo '1'
  fi
}

commonProcedure() {
  local name=$1
  downloadArchive $name
  cd ~/Downloads
  cd "${name}"
  makepkg -Asc --needed --noconfirm
  sudo pacman -U --needed --noconfirm ${name}*.pkg.tar.xz
  if [[ $? -ne 0 ]] ; then
    icho " [*][r]x[/] the package [*]${name}[/] was [*]not installed[/]"
    exit 1
  else
    removeArchive $name
    icho " [*][g]✔[/] [*]${name}[/] successfully [*]installed[/]"
  fi
}

downloadArchive() {
  local name=$1
  mkdir -p ~/Downloads
  cd ~/Downloads
  curl -L -O $(getAURPackageNameAsURL $name)
  tar -xzf "${name}.tar.gz"
}

getAURPackageNameAsURL() {
  local name=$1
  echo "https://aur.archlinux.org/cgit/aur.git/snapshot/${name}.tar.gz"
}

gnomeLoginBG() {
  local IMAGE="/home/tyler274/Pictures/xfckbb.jpg"
  local CREATED_TMP="0"
  local GST=/usr/share/gnome-shell/gnome-shell-theme.gresource
  local GSTRES=$(basename $GST)
  local WORKDIR=~/tmp/gdm-login-background
  local r
  if [ "$IMAGE" = "" ]; then
    IMAGE=$(
      dbus-launch gsettings get org.gnome.desktop.screensaver picture-uri |
      sed -e "s/'//g" |
      sed -e "s/^file:\/\///g"
    )
  fi
  if [ ! -f $IMAGE ]; then
    echo "unknown IMAGE $IMAGE"
    exit 1
  fi
  if [ ! -d ~/tmp ]; then
    mkdir -p ~/tmp
    CREATED_TMP="1"
  fi
  mkdir -p $WORKDIR
  cd $WORKDIR
  mkdir -p theme
  for r in `gresource list $GST`; do
    gresource extract $GST $r >$WORKDIR$(echo $r | sed -e 's/^\/org\/gnome\/shell\//\//g')
  done
  cd theme
  cp "$IMAGE" ./
  sync
  IMAGE=$(basename $IMAGE)

  cat gnome-shell.css | sed -e 's/#lockDialogGroup/#lockDialogGroup-ignore/g' >gnome-shell.tmp

  echo "
#lockDialogGroup {
  background: #2e3436 url(${IMAGE});
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center center; }" >>gnome-shell.tmp

  sync
  mv gnome-shell.tmp gnome-shell.css

  echo '<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/gnome/shell/theme">' >"${GSTRES}.xml"
  for r in `ls *.*`; do
    echo "    <file>$r</file>" >>"${GSTRES}.xml"
  done
  echo '  </gresource>
</gresources>' >>"${GSTRES}.xml"
  sync
  glib-compile-resources "${GSTRES}.xml"

  sudo mv "/usr/share/gnome-shell/$GSTRES" "/usr/share/gnome-shell/${GSTRES}.backup"
  sudo mv "$GSTRES" /usr/share/gnome-shell/

  if [ "$CREATED_TMP" = "1" ]; then
    rm -r ~/tmp
  fi
}

icho() {

  # [*][g]✔[/] [*][r]x[/] [*][y]![/]

  # resets
  local reset_all=$(tput sgr0)        # [/] usable as reset for each style
  local reset_color=$(tput setaf 9)   # [/(d|r|g|y|b|m|c|w)]
  local reset_bgcolor=$(tput setab 9) # [/(bd|br|bg|by|bb|bm|bc|bw)]
  local reset_underline=$(tput rmul)  # [/_]
  local reset_stand_out=$(tput rmso)  # [/o]

  # colors
  local black=$(tput setaf 0)         # [d]dark[/d]
  local red=$(tput setaf 1)           # [r]red[/r]
  local green=$(tput setaf 2)         # [g]green[/g]
  local yellow=$(tput setaf 3)        # [y]yellow[/y]
  local blue=$(tput setaf 4)          # [b]blue[/b]
  local magenta=$(tput setaf 5)       # [m]magenta[/m]
  local cyan=$(tput setaf 6)          # [c]cyan[/c]
  local white=$(tput setaf 7)         # [w]white[/w]

  # background colors
  local bgblack=$(tput setab 0)       # [bd]bg dark[/bd]
  local bgred=$(tput setab 1)         # [br]bg red[/br]
  local bggreen=$(tput setab 2)       # [bg]bg green[/bg]
  local bgyellow=$(tput setab 3)      # [by]bg yellow[/by]
  local bgblue=$(tput setab 4)        # [bb]bg blue[/bb]
  local bgmagenta=$(tput setab 5)     # [bm]bg magenta[/bm]
  local bgcyan=$(tput setab 6)        # [bc]bg cyan[/bc]
  local bgwhite=$(tput setab 7)       # [bw]bg white[/bw]

  # styles
  local start_stand_out=$(tput smso)  # [o]
  local start_under=$(tput smul)      # [_][/_]
  local start_bold=$(tput bold)       # [*][/*]
                                      # [*][/]

  # not implemented
  # rev Start reverse video
  # blink Start blinking text
  # invis Start invisible text

  # phrase replacement
  local phrase=$(echo "${1}" |
    sed -e "s/\[o\]/\\${start_stand_out}/g" | sed -e "s/\[\/o\]/\\${reset_stand_out}/g" |
    sed -e "s/\[\*\]/\\${start_bold}/g" | sed -e "s/\[\/\*\]/\\${reset_all}/g" |
    sed -e "s/\[_\]/\\${start_under}/g" | sed -e "s/\[\/_\]/\\${reset_underline}/g" |
    sed -e "s/\[d\]/\\${black}/g" | sed -e "s/\[\/d\]/\\${reset_color}/g" |
    sed -e "s/\[r\]/\\${red}/g" | sed -e "s/\[\/r\]/\\${reset_color}/g" |
    sed -e "s/\[g\]/\\${green}/g" | sed -e "s/\[\/g\]/\\${reset_color}/g" |
    sed -e "s/\[y\]/\\${yellow}/g" | sed -e "s/\[\/y\]/\\${reset_color}/g" |
    sed -e "s/\[b\]/\\${blue}/g" | sed -e "s/\[\/b\]/\\${reset_color}/g" |
    sed -e "s/\[m\]/\\${magenta}/g" | sed -e "s/\[\/m\]/\\${reset_color}/g" |
    sed -e "s/\[c\]/\\${cyan}/g" | sed -e "s/\[\/c\]/\\${reset_color}/g" |
    sed -e "s/\[w\]/\\${white}/g" | sed -e "s/\[\/w\]/\\${reset_color}/g" |
    sed -e "s/\[bd\]/\\${bgblack}/g" | sed -e "s/\[\/bd\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[br\]/\\${bgred}/g" | sed -e "s/\[\/br\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[bg\]/\\${bggreen}/g" | sed -e "s/\[\/bg\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[by\]/\\${bgyellow}/g" | sed -e "s/\[\/by\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[bb\]/\\${bgblue}/g" | sed -e "s/\[\/bb\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[bm\]/\\${bgmagenta}/g" | sed -e "s/\[\/bm\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[bc\]/\\${bgcyan}/g" | sed -e "s/\[\/bc\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[bw\]/\\${bgwhite}/g" | sed -e "s/\[\/bw\]/\\${reset_bgcolor}/g" |
    sed -e "s/\[\/\]/\\${reset_all}/g"
  )
  echo -e "${phrase}${reset_all}"
}

mountBoot() {
  local IFS
  local len
  local info
  local disk
  local found=0
  lsblk -r | while IFS= read -r line; do
    len=${#line}
    if [ "${line:$len-6}" = " disk " ]; then
      for info in $line; do
        disk=$info
        break
      done
    fi
    if [ "${line:$len-2}" = " /" ]; then
      for info in $line; do
        len=${#disk}
        if [ "${info:0:$len}" = "$disk" ]; then
          sudo mount "/dev/${disk}1" /boot
          break
        fi
      done
    fi
  done
}

removeArchive() {
  local name=$1
  cd ~/Downloads
  rm -rf "${name}"
  rm "${name}.tar.gz"
}

sha() {
  local how=$1
  local what=$2
  if [ "$(which openssl 2> /dev/null)" = "" ]; then
    sudo pacman -S --needed --noconfirm openssl > /dev/null 2>&1
  fi
  if [ ! -f "$what" ]; then
    icho "[*]string mode[/]"
    echo "$what" > /tmp/archy-sha-content
    what=/tmp/archy-sha-content
  fi
  echo "cat '${what}' | openssl dgst -$how -binary | base64" > /tmp/archy-sha
  echo "${how}-$(sh /tmp/archy-sha)"
  rm /tmp/archy-sha
  if [ -f /tmp/archy-sha-content ]; then
    rm /tmp/archy-sha-content
  fi
}

updateSyslinuxConfig() {
  local boot=$1
  local syslinux=$boot/syslinux/syslinux.cfg
  local tmp=~/tmp_syslinux.cfg
  local WIDTH=$2
  local HEIGHT=$3
  cat $syslinux | sed -e "s/MENU RESOLUTION [0-9]* [0-9]*/MENU RESOLUTION $WIDTH $HEIGHT/">$tmp
  sudo cp $tmp $syslinux
  rm $tmp
}

verifyYaourt() {
  local name="yaourt"
  local current
  local remote
  if [ "$(sudo pacman -Qsq $name | grep ^$name$)" = "" ]; then
    icho "[*][g]$name[/] not found."
    icho "installing [*]development packages[/]"
    sudo pacman -S --needed --noconfirm base-devel linux-headers git sudo diffstat chrpath wget cpio pv > /dev/null 2>&1
    icho "installing [*]package-query[/]"
    commonProcedure 'package-query'
    icho "installing [*]$name[/]"
    commonProcedure "$name"
  else
    yaourt -S --needed --noconfirm package-query yaourt
    # current=$(
    #   yaourt -Q $name |
    #   sed -n -E "s/^.+?[ ]+([0-9.-]+).*/\1/p"
    # )
    # remote=$(
    #   yaourt -Si $name |
    #   sed -n -E "s/^.+?Ver[a-z]+[ ]*:[ ]*([0-9.-]+).*/\1/p"
    # )
    # if [ "$current" != "$remote" ]; then
    #   sudo pacman -R --noconfirm $name package-query
    #   icho "updating [*]package-query[/]"
    #   commonProcedure 'package-query'
    #   icho "updating [*]$name[/]"
    #   commonProcedure "$name"
    # fi
  fi
}

archy "$@"
